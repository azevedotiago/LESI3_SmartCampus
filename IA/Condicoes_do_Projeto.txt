# definicao de constantes
#define LED 6         // pino de output dos LEDs, porta PWM
#define LDR 0         // pino de input do sensor de luz
#define PIR 3         // pino de input do sensor de movimento
#define LEDWIFION 10  // wireless conetado e a funcionar
#define LEDWIFIOFF 11 // wireless nao conetado
#define MAXLED 24     // LED maximum value during tests
#define LDRmax 1000   // LDR maximum input
#define LDRmin 40     // LDR minimum input
#define LDRmed 600    // 600 para efeitos de testes dentro de casa
#define TIMEmax 15    // tempo maximo LEDs ligados
#define valLEDmin 2   // valor dos LEDs quando ligados mas sem movimentom, em standby 
#define valINCREMENT 4 // valor de incremento / decremento na suavizacao de alteracao do valor da iluminacao



# definicao de variaveis e seus valores iniciais
int valLED = 0;       // valor inicial
int stateLED = LOW;   // valor inicial do estado dos LEDs desligados
int valLDR = 0;       // valor inicial
long valLDRnew = 0;   // valor incicial
int valPIR = 0;       // valor inicial
int statePIR = LOW;   // sem deteção de movimento
uint32_t timer = 0;   // temporizador para o tempo dos LEDs ligados 
uint32_t timer2 = 0;



# inputs
valLDR = analogRead(LDR);             // leitura do valor do sensor LDR
valPIR = digitalRead(PIR);            // leitura do valor do sensor de movimento PIR
if (valPIR == HIGH) statePIR = HIGH;  // estado de detecao de movimento passa a TRUE



# outputs
// LDRmax - pouca iluminacao, sem sol, escuro
// LDRmin - muita iluminacao, muito sol
if (valLDR <= LDRmin ) valLDR=LDRmin;
if (valLDR >= LDRmax) valLDR=LDRmax;
valLDRnew = (long) (valLDR * 100 / LDRmax );     // converter para percentagem 0% a 100%
int valLEDnew =  (int) (255  * valLDRnew / 100); // atribui ao LED o valor de iluminacao ideal de acordo com o sensor de input LDR

if (valLDR >= LDRmed) {
	if (statePIR==HIGH) {   // caso volte a detetar movimento reinicia o timer
	  statePIR = LOW;       // estado detecao de movimento passa a FALSO
	  timer = TIMEmax;      // o tempo de LEDs ligados volta ao maximo
	  stateLED = HIGH;      // liga os LEDs
	} 


	if (timer > 0) {
	  timer = timer - (millis() - timer2);  // atualiza o tempo restante guardado na variavel timer
	  // Ajusta o valor da iluminacao conforme a intensidade de luz "solar", o novo valor que esta guardado em valLEDnew
	  if (valLED < valLEDnew) valLED=valLED + valINCREMENT;
	  if (valLED > valLEDnew) valLED=valLED - valINCREMENT;
	} else {                      // reduz o valor da iluminacao dos LEDs ao valor mínimo, iluminacao de presenca
	  timer = 0;
	  stateLED = LOW; 
	  if (valLED > valLEDmin) {   // reduz a iluminacao até ser igual ao valor de iluminacao de presenca valLEDmin
		valLED = valLED - valINCREMENT;
	  } else {
		valLED = valLEDmin;
	  }
	}
	
	analogWrite(LED, valLED);     // atribui a iluminacao atual aos LEDs
} else {                        // desliga os LEDs
	valLED = 0;                   // atribui a iluminacao a zero...
	analogWrite(LED, valLED);     // ...e desliga os LEDs
	timer = 0;
}
