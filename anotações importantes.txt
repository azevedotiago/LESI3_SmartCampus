SETR....

no codigo do arduino:

### a) interrupt associado ao sensor PIR para que sempre ao detetar movimento enviar os dados para o servidor

#define interruptPin 3 // pino de input do sensor de movimento para a funcao de interrupt via detecao de movimento
 // inicializacao do Interrupt atraves da detecao de movimento com o sensor PIR
  attachInterrupt(digitalPinToInterrupt(interruptPin), detectionPIR, CHANGE);
 void detectionPIR() {
  if (statePIR == LOW) {
    Serial.print("\nInterrupt via detecao de movimento ATIVADO!");
    statePIR = HIGH;            // estado de detecao de movimento passa a TRUE
    sendData = HIGH;            // estado de envio de dados para o servidor passa a TRUE
  }
}


 
### b) interrupt timer de 120 em 120 segundos envia o estado atual do sistema para o servidor 

int counter = 0;	   // armazena a quantidade de segundos passados para o interrupt atraves do timer

 // inicializacao do Interrupt atraves de um Timer
  Timer1.initialize(500000);
  Timer1.setPeriod(1000000);            // definido para periodos de 1 segundo
  Timer1.attachInterrupt(periodic);     // funcao que invoca quando e' atingido o periodo

void periodic() {
  if (counter >= periodo) {
       Serial.print("\nInterrupt via timer1 a cada ");
       Serial.print(periodo);
       Serial.print(" segundos ATIVADO!");
       sendData= HIGH;         // estado de envio de dados para o servidor passa a TRUE
       counter = 0;
  } else {
  ++counter;
  }
}



### c) durante o desenvolvimento deste projeto na versão 0.1 foi implementado um serviço http em cada poste de iluminacao, permitindo que externamente com um equipamento com um navegador acede-se através do endereço IP ao posto e visualiza-se o estado atual do sistema.
Durante o desenvolvimento e implementação de novas funcionalidades este código deixou de funcionar por motivos de incompatibilidades do sistema, está previsto num futura versão a correção e reimplementação deste serviço.

/* inicio: serviço http do proprio poste de iluminacao*/

  // fica a espera de ligacoes de clientes
  WiFiEspClient client = server.available();
  if (client) {
    Serial.println("Nova ligacao http");
    // um pedido http termina com uma linha em branco
    boolean currentLineIsBlank = true;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
		// se chegou ao fim da linha (recebeu um caracter de nova linha) e a linha está em branco,
		// o pedido http terminou, entao ja se pode enviar uma resposta
        if (c == '\n' && currentLineIsBlank) {
          Serial.println("Enviado resposta http");

          // envia um cabeçalho de resposta http padrão
          // use \r\n em vez de muitas instruções println para acelerar o envio de dados
          client.print(
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: text/html\r\n"
            "Connection: close\r\n"  // a ligacao será fechada após a conclusão da resposta
            "Refresh: 5\r\n"         // recarrega a pagina automaticamente a cada 5 segundos
            "\r\n");
          client.print("<!DOCTYPE HTML>\r\n");
          client.print("<html>\r\n");
          client.print("<h4>Smart Energy Campus</h4>\r\n");
          client.print("<h1>Lamp Post</h1>\r\n");
          client.print("<h2>Network</h2>\r\n");
          client.print("Mac Address: ");
          client.print(mac[5],HEX);client.print(":");client.print(mac[4],HEX);client.print(":");client.print(mac[3],HEX);client.print(":");
          client.print(mac[2],HEX);client.print(":");client.print(mac[1],HEX);client.print(":");client.print(mac[0],HEX);
          client.print("<br>\r\n");
          client.print("IP Address: ");
          client.print(ip);
          client.print("<br>\r\n");
          client.print("<h2>Status</h2>\r\n");
          client.print("Light value: ");  client.print(valLED); client.print("<br>\r\n");
          client.print("Light state: ");  client.print(stateLED); client.print("<br>\r\n");
          client.print("LDR value: ");    client.print(valLDR); client.print("<br>\r\n");
          client.print("LDR %: ");        client.print(valLDRnew); client.print("<br>\r\n");
          client.print("PIR value: ");    client.print(valPIR); client.print("<br>\r\n");
          client.print("PIR state: ");    client.print(statePIR); client.print("<br>\r\n");
          client.print("Timer: ");        client.print(timer); client.print("<br>\r\n");
          client.print("<br>\r\n");
          client.print("Requests received: "); client.print(++reqCount);
          client.print("<br>\r\n");

          client.print("</html>\r\n");
          break;
        }
        if (c == '\n') {
          // Iniciando uma nova linha
          currentLineIsBlank = true;
        } else if (c != '\r') {
          // Obteve um caracter na linha atual
          currentLineIsBlank = false;
        }
      }
    }
    // Dando tempo ao navegador da web para receber os dados
    delay(10);

    // Terminar a ligacao
    client.stop();
    Serial.println("Cliente desconetado");
  } 
  /* fim: serviço http do proprio poste de iluminacao*/

### d) fazer capturas de ecrã do acesso http aos postes de iluminação, está na versao v0.1
as capturas de ecrã encontram-se em "projeto\servidor\galeria" denominadas por:
serviço web de um posto de iluminação1.png
serviço web de um posto de iluminação2.png
serviço web de um posto de iluminação3.png


### e) codigo fonte do arduino encontra-se em "projeto\arduino\SmartEnergyCampus\SmartEnergyCampus.ino"

na maquete:
### a) referir que o sensor pir em futuros trabalhos será colocado num ponto mais estratégico do poste de iluminacao de forma a que a área de abrangência seja superior e o poste não interfira na deteção de movimento
colocar as fotos que se encontram em "projeto\maquete\sensorPIR"
